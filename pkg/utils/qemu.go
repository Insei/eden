package utils

import (
	"bytes"
)
import "text/template"

//QemuSettings struct for pass into template
type QemuSettings struct {
	DTBDrive   string
	Firmware   []string
	MemoryMB   int
	CPUs       int
	USBSerials int
	USBTablets int
}

var qemuTemplate = `#qemu config file generated by eden
{{- if .Firmware }}
{{ $firmwareLength := len .Firmware }}{{ if eq $firmwareLength 1 }}
[machine]
  firmware = "{{ index .Firmware 0 }}"
{{- else if eq $firmwareLength 2 }}
[drive]
  if = "pflash"
  format = "raw"
  unit = "0"
  readonly = "on"
  file = "{{ index .Firmware 0 }}"

[drive]
  if = "pflash"
  format = "raw"
  unit = "1"
  file = "{{ index .Firmware 1 }}"
{{end}}
{{end}}
{{if .DTBDrive }}
[drive]
  file = "fat:rw:{{ .DTBDrive }}"
  format = "vvfat"
  label = "QEMU_DTB""
{{end}}
[rtc]
  base = "utc"
  clock = "rt"

[memory]
  size = "{{ .MemoryMB }}"

[smp-opts]
  cpus = "{{ .CPUs }}"

[device "usb"]
  driver = "qemu-xhci"

{{- if .USBTablets -}}
{{ range $i := .USBTablets }}
[device]
  driver = "usb-tablet"
{{ end }}
{{- end -}}

{{- if .USBSerials -}}
{{ range $i := .USBSerials }}
[chardev "charserial{{ $i }}"]
  backend = "pty"

[device "serial{{ $i }}"]
  driver = "usb-serial"
  chardev = "charserial{{ $i }}"
{{ end }}
{{- end -}}
`

//GenerateQemuConfig provides string representation of Qemu config
//for QemuSettings object
func (settings QemuSettings) GenerateQemuConfig() ([]byte, error) {
	t := template.New("t")
	t, err := t.Parse(qemuTemplate)
	if err != nil {
		return nil, err
	}
	buf := new(bytes.Buffer)
	err = t.Execute(buf, settings)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
