swagger: '2.0'
info:
  version: "0.0.1"
  title: 'EDEN API'
  description: ''
schemes:
 - https
 - http
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /api/v1/devices:
    get:
      tags:
      - "DeviceOps"
      operationId: "List"
      parameters:
      - name: "summary"
        in: "query"
        required: false
        type: "boolean"
        format: "boolean"
        x-exportParamName: "Summary"
        x-optionalDataType: "Bool"
      - name: "project"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Project"
        x-optionalDataType: "String"
      - name: "next.pageToken"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "NextPageToken"
        x-optionalDataType: "String"
      - name: "next.maxRecords"
        in: "query"
        required: false
        type: "string"
        format: "uint64"
        x-exportParamName: "NextMaxRecords"
        x-optionalDataType: "String"
      - name: "next.orderBy"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "NextOrderBy"
        x-optionalDataType: "String"
      - name: "next.pageNum"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "NextPageNum"
        x-optionalDataType: "Int64"
      - name: "next.pageSize"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "NextPageSize"
        x-optionalDataType: "Int64"
      - name: "next.totalPages"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "NextTotalPages"
        x-optionalDataType: "Int64"
      - name: "enterpriseId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "EnterpriseId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/DeviceConfigList"
definitions:
  AdapterUsage:
    type: "string"
    title: "- AdpAppDedicated: Adapter assignment, dom0 doesn't see it\n - AdpAppShared:\
      \ Dom0 uses this adapter, and application can share it\n - AdpDisabled: for\
      \ future use where, we block a certain things by design"
    enum:
    - "AdpUnused"
    - "AdpManagement"
    - "AdpAppDedicated"
    - "AdpAppShared"
    - "AdpDisabled"
    default: "AdpUnused"
  BaseOSImage:
    type: "object"
    properties:
      uuid:
        type: "string"
      version:
        type: "string"
      imageName:
        type: "string"
      activate:
        type: "boolean"
        format: "boolean"
    example:
      imageName: "imageName"
      activate: true
      uuid: "uuid"
      version: "version"
  DeviceCerts:
    type: "object"
    properties:
      pemCert:
        type: "string"
        format: "byte"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      pemKey:
        type: "string"
        format: "byte"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    example:
      pemKey: "pemKey"
      pemCert: "pemCert"
  DeviceConfig:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      title:
        type: "string"
      description:
        type: "string"
      revision:
        $ref: "#/definitions/ObjectRevision"
      enterpriseId:
        type: "string"
      utype:
        $ref: "#/definitions/ModelArchType"
      project:
        type: "string"
        title: "project Name"
      serialno:
        type: "string"
        description: "factory installed guys, or if we have serial no\nwe can take\
          \ this value."
      location:
        type: "string"
      cpu:
        type: "integer"
        format: "int64"
        title: "configured values"
      thread:
        type: "integer"
        format: "int64"
      memory:
        type: "integer"
        format: "int64"
        title: "in MBs"
      storage:
        type: "integer"
        format: "int64"
        title: "in GBs"
      onboarding:
        title: "device level certs"
        $ref: "#/definitions/DeviceCerts"
      identity:
        type: "string"
        format: "byte"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      obkey:
        type: "string"
      clientIp:
        type: "string"
        title: "client IP"
      dlisp:
        $ref: "#/definitions/DeviceLisp"
      adminState:
        title: "administrative state of device"
        $ref: "#/definitions/State"
      resetCounter:
        type: "integer"
        format: "int64"
        title: "reset command"
      resetTime:
        type: "string"
      opState:
        title: "device operational state"
        $ref: "#/definitions/OpState"
      baseImage:
        type: "array"
        items:
          $ref: "#/definitions/BaseOSImage"
      brand:
        type: "string"
        title: "brand and model"
      model:
        type: "string"
      configItem:
        type: "array"
        items:
          $ref: "#/definitions/ConfigItem"
      deprecated:
        type: "string"
        title: "Deprecate"
      interfaces:
        type: "array"
        items:
          $ref: "#/definitions/sysInterface"
      sitePictures:
        type: "array"
        title: "capture site pictures"
        items:
          type: "string"
    example:
      resetCounter: 2
      memory: 5
      deprecated: "deprecated"
      utype: {}
      baseImage:
      - imageName: "imageName"
        activate: true
        uuid: "uuid"
        version: "version"
      - imageName: "imageName"
        activate: true
        uuid: "uuid"
        version: "version"
      description: "description"
      project: "project"
      opState: {}
      storage: 2
      title: "title"
      dlisp:
        mode: "mode"
        lispMapServers:
        - credential: "credential"
          nameOrIp: "nameOrIp"
        - credential: "credential"
          nameOrIp: "nameOrIp"
        lispInstance: 7
        EID: "EID"
        clientAddr: "clientAddr"
        eidAllocationPrefixLen: 3
        eidAllocationPrefix: "eidAllocationPrefix"
        zedServers:
        - hostName: "hostName"
          EID:
          - "EID"
          - "EID"
        - hostName: "hostName"
          EID:
          - "EID"
          - "EID"
        EIDHashLen: 9
      serialno: "serialno"
      identity: "identity"
      adminState: {}
      onboarding:
        pemKey: "pemKey"
        pemCert: "pemCert"
      model: "model"
      id: "id"
      resetTime: "resetTime"
      brand: "brand"
      interfaces:
      - netname: "netname"
        io:
          name: "name"
          type: {}
        deprecate_uplink: true
        deprecate_freeuplink: true
        intfname: "intfname"
        ipaddr: "ipaddr"
        intfUsage: {}
        macaddr: "macaddr"
      - netname: "netname"
        io:
          name: "name"
          type: {}
        deprecate_uplink: true
        deprecate_freeuplink: true
        intfname: "intfname"
        ipaddr: "ipaddr"
        intfUsage: {}
        macaddr: "macaddr"
      obkey: "obkey"
      cpu: 1
      thread: 5
      sitePictures:
      - "sitePictures"
      - "sitePictures"
      devLocation:
        country: "country"
        loc: "loc"
        hostname: "hostname"
        city: "city"
        org: "org"
        freeloc: "freeloc"
        latlong: "latlong"
        underlayIP: "underlayIP"
        postal: "postal"
        region: "region"
      revision:
        createdAt: "2000-01-23T04:56:07.000+00:00"
        updatedBy: "updatedBy"
        createdBy: "createdBy"
        prev: "prev"
        curr: "curr"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      clientIp: "clientIp"
      name: "name"
      location: "location"
      enterpriseId: "enterpriseId"
      configItem:
      - uint64Value: "uint64Value"
        stringValue: "stringValue"
        uint32Value: 4
        valueType: "valueType"
        floatValue: 7.386282
        boolValue: true
        key: "key"
      - uint64Value: "uint64Value"
        stringValue: "stringValue"
        uint32Value: 4
        valueType: "valueType"
        floatValue: 7.386282
        boolValue: true
        key: "key"
  DeviceConfigList:
    type: "object"
    properties:
      summaryByState:
        $ref: "#/definitions/Summary"
      list:
        type: "array"
        items:
          $ref: "#/definitions/DeviceConfig"
    example:
      summaryByState:
        total: 0
        values:
          key: 6
        description: "description"
      list:
      - resetCounter: 2
        memory: 5
        deprecated: "deprecated"
        utype: {}
        baseImage:
        - imageName: "imageName"
          activate: true
          uuid: "uuid"
          version: "version"
        - imageName: "imageName"
          activate: true
          uuid: "uuid"
          version: "version"
        description: "description"
        project: "project"
        opState: {}
        storage: 2
        title: "title"
        dlisp:
          mode: "mode"
          lispMapServers:
          - credential: "credential"
            nameOrIp: "nameOrIp"
          - credential: "credential"
            nameOrIp: "nameOrIp"
          lispInstance: 7
          EID: "EID"
          clientAddr: "clientAddr"
          eidAllocationPrefixLen: 3
          eidAllocationPrefix: "eidAllocationPrefix"
          zedServers:
          - hostName: "hostName"
            EID:
            - "EID"
            - "EID"
          - hostName: "hostName"
            EID:
            - "EID"
            - "EID"
          EIDHashLen: 9
        serialno: "serialno"
        identity: "identity"
        adminState: {}
        onboarding:
          pemKey: "pemKey"
          pemCert: "pemCert"
        model: "model"
        id: "id"
        resetTime: "resetTime"
        brand: "brand"
        interfaces:
        - netname: "netname"
          io:
            name: "name"
            type: {}
          deprecate_uplink: true
          deprecate_freeuplink: true
          intfname: "intfname"
          ipaddr: "ipaddr"
          intfUsage: {}
          macaddr: "macaddr"
        - netname: "netname"
          io:
            name: "name"
            type: {}
          deprecate_uplink: true
          deprecate_freeuplink: true
          intfname: "intfname"
          ipaddr: "ipaddr"
          intfUsage: {}
          macaddr: "macaddr"
        obkey: "obkey"
        cpu: 1
        thread: 5
        clientIp: "clientIp"
        name: "name"
        location: "location"
        enterpriseId: "enterpriseId"
        configItem:
        - uint64Value: "uint64Value"
          stringValue: "stringValue"
          uint32Value: 4
          valueType: "valueType"
          floatValue: 7.386282
          boolValue: true
          key: "key"
        - uint64Value: "uint64Value"
          stringValue: "stringValue"
          uint32Value: 4
          valueType: "valueType"
          floatValue: 7.386282
          boolValue: true
          key: "key"
      - resetCounter: 2
        memory: 5
        deprecated: "deprecated"
        utype: {}
        baseImage:
        - imageName: "imageName"
          activate: true
          uuid: "uuid"
          version: "version"
        - imageName: "imageName"
          activate: true
          uuid: "uuid"
          version: "version"
        description: "description"
        project: "project"
        opState: {}
        storage: 2
        title: "title"
        dlisp:
          mode: "mode"
          lispMapServers:
          - credential: "credential"
            nameOrIp: "nameOrIp"
          - credential: "credential"
            nameOrIp: "nameOrIp"
          lispInstance: 7
          EID: "EID"
          clientAddr: "clientAddr"
          eidAllocationPrefixLen: 3
          eidAllocationPrefix: "eidAllocationPrefix"
          zedServers:
          - hostName: "hostName"
            EID:
            - "EID"
            - "EID"
          - hostName: "hostName"
            EID:
            - "EID"
            - "EID"
          EIDHashLen: 9
        serialno: "serialno"
        identity: "identity"
        adminState: {}
        onboarding:
          pemKey: "pemKey"
          pemCert: "pemCert"
        model: "model"
        id: "id"
        resetTime: "resetTime"
        brand: "brand"
        interfaces:
        - netname: "netname"
          io:
            name: "name"
            type: {}
          deprecate_uplink: true
          deprecate_freeuplink: true
          intfname: "intfname"
          ipaddr: "ipaddr"
          intfUsage: {}
          macaddr: "macaddr"
        - netname: "netname"
          io:
            name: "name"
            type: {}
          deprecate_uplink: true
          deprecate_freeuplink: true
          intfname: "intfname"
          ipaddr: "ipaddr"
          intfUsage: {}
          macaddr: "macaddr"
        obkey: "obkey"
        cpu: 1
        thread: 5
        sitePictures:
        - "sitePictures"
        - "sitePictures"
        devLocation:
          country: "country"
          loc: "loc"
          hostname: "hostname"
          city: "city"
          org: "org"
          freeloc: "freeloc"
          latlong: "latlong"
          underlayIP: "underlayIP"
          postal: "postal"
          region: "region"
        revision:
          createdAt: "2000-01-23T04:56:07.000+00:00"
          updatedBy: "updatedBy"
          createdBy: "createdBy"
          prev: "prev"
          curr: "curr"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        clientIp: "clientIp"
        name: "name"
        location: "location"
        enterpriseId: "enterpriseId"
        configItem:
        - uint64Value: "uint64Value"
          stringValue: "stringValue"
          uint32Value: 4
          valueType: "valueType"
          floatValue: 7.386282
          boolValue: true
          key: "key"
        - uint64Value: "uint64Value"
          stringValue: "stringValue"
          uint32Value: 4
          valueType: "valueType"
          floatValue: 7.386282
          boolValue: true
          key: "key"
  IoType:
    type: "string"
    enum:
    - "IoNoop"
    - "IoEth"
    - "IoUSB"
    - "IoCOM"
    - "IoAudio"
    - "IoWLAN"
    - "IoWWAN"
    - "IoHDMI"
    - "IoOther"
    default: "IoNoop"
  ModelArchType:
    type: "string"
    title: "- UNDEFINED: don't know what kind of device it is right now\n - AMD64:\
      \ does support hyperVisor"
    enum:
    - "NOOP"
    - "UNDEFINED"
    - "AMD64"
    - "ARM64"
    default: "NOOP"
  ObjectRevision:
    type: "object"
    properties:
      prev:
        type: "string"
      curr:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      createdBy:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      updatedBy:
        type: "string"
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      updatedBy: "updatedBy"
      createdBy: "createdBy"
      prev: "prev"
      curr: "curr"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
  OpState:
    type: "string"
    enum:
    - "StateNone"
    - "Online"
    - "Halted"
    - "Init"
    - "Rebooting"
    - "Offline"
    - "Unknown"
    - "Unprovisioned"
    - "Provisioned"
    - "Suspect"
    - "Downloading"
    - "Restarting"
    - "Purging"
    - "Halting"
    - "Error"
    default: "StateNone"
  State:
    type: "string"
    enum:
    - "sNone"
    - "sCreated"
    - "sDeleted"
    - "sActive"
    - "sInactive"
    - "sRegistered"
    - "sLoginSucceeded"
    - "sLoginFailed"
    - "sLogoutSucceeded"
    - "sLogoutFailed"
    - "sUpdated"
    - "sRemoteConsoleStart"
    - "sRemoteConsoleEnd"
    default: "sNone"
  Summary:
    type: "object"
    properties:
      description:
        type: "string"
      total:
        type: "integer"
        format: "int64"
      values:
        type: "object"
        additionalProperties:
          type: "integer"
          format: "int64"
    example:
      total: 0
      values:
        key: 6
      description: "description"
  phyAdapter:
    type: "object"
    properties:
      type:
        $ref: "#/definitions/IoType"
      name:
        type: "string"
    example:
      name: "name"
      type: {}
  sysInterface:
    type: "object"
    properties:
      intfname:
        type: "string"
        description: "name of interface in the manifest to which this network\nor\
          \ adapter maps to."
      netname:
        type: "string"
        title: "if attaching a network use netname"
      ipaddr:
        type: "string"
        title: "if network is static, then we might need"
      macaddr:
        type: "string"
        title: "in some cases mac-address might be needed to be overwritten"
      io:
        title: "otherwise hardware adpater assignement"
        $ref: "#/definitions/phyAdapter"
      deprecate_uplink:
        type: "boolean"
        format: "boolean"
        title: "Deprecated"
      deprecate_freeuplink:
        type: "boolean"
        format: "boolean"
      intfUsage:
        $ref: "#/definitions/AdapterUsage"
    title: "system interfaces that needs to be used by dom0"
    example:
      netname: "netname"
      io:
        name: "name"
        type: {}
      deprecate_uplink: true
      deprecate_freeuplink: true
      intfname: "intfname"
      ipaddr: "ipaddr"
      intfUsage: {}
      macaddr: "macaddr"
  DeviceLisp:
    type: "object"
    properties:
      lispMapServers:
        type: "array"
        items:
          $ref: "#/definitions/LispServer"
      lispInstance:
        type: "integer"
        format: "int64"
      EID:
        type: "string"
      EIDHashLen:
        type: "integer"
        format: "int64"
      zedServers:
        type: "array"
        items:
          $ref: "#/definitions/DevController"
      eidAllocationPrefix:
        type: "string"
        format: "byte"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      eidAllocationPrefixLen:
        type: "integer"
        format: "int64"
      clientAddr:
        type: "string"
      mode:
        type: "string"
        title: "TEMP : flag to indicate which version of LISP data plane should be\
          \ running on the device"
    example:
      mode: "mode"
      lispMapServers:
      - credential: "credential"
        nameOrIp: "nameOrIp"
      - credential: "credential"
        nameOrIp: "nameOrIp"
      lispInstance: 7
      EID: "EID"
      clientAddr: "clientAddr"
      eidAllocationPrefixLen: 3
      eidAllocationPrefix: "eidAllocationPrefix"
      zedServers:
      - hostName: "hostName"
        EID:
        - "EID"
        - "EID"
      - hostName: "hostName"
        EID:
        - "EID"
        - "EID"
      EIDHashLen: 9
  ConfigItem:
    type: "object"
    properties:
      key:
        type: "string"
      valueType:
        type: "string"
      boolValue:
        type: "boolean"
        format: "boolean"
      uint32Value:
        type: "integer"
        format: "int64"
      uint64Value:
        type: "string"
        format: "uint64"
      floatValue:
        type: "number"
        format: "float"
      stringValue:
        type: "string"
    example:
      uint64Value: "uint64Value"
      stringValue: "stringValue"
      uint32Value: 4
      valueType: "valueType"
      floatValue: 7.386282
      boolValue: true
      key: "key"
  LispServer:
    type: "object"
    properties:
      nameOrIp:
        type: "string"
      credential:
        type: "string"
    example:
      credential: "credential"
      nameOrIp: "nameOrIp"
  DevController:
    type: "object"
    properties:
      hostName:
        type: "string"
      EID:
        type: "array"
        items:
          type: "string"
    example:
      hostName: "hostName"
      EID:
      - "EID"
      - "EID"
  Object:
    type: "string"
    enum:
    - "nNONE"
    - "nEdgeNode"
    - "nEdgeApp"
    - "nImage"
    - "nEdgeAppInstance"
    - "nNetwork"
    - "nDatastore"
    - "nNetInst"
    default: "nNONE"

# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /itmo-eve/eden/0.0.1
# Added by API Auto Mocking Plugin
